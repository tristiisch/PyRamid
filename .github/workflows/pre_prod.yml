name: Python CI Pre-Production

on:
  push:
    branches:
      - "pre-prod"
    paths:
      - "src/**/*.py"
      - "requirements.txt"
      - "Dockerfile"
      - "docker-compose*.yml"
      - ".github/workflows/compile.yml"
  pull_request:
    branches:
      - "pre-prod"
    paths:
      - "src/**/*.py"
      - "requirements.txt"
      - "Dockerfile"
      - "docker-compose*.yml"
      - ".github/workflows/compile.yml"
  workflow_dispatch:

env:
    SRC: "./src/pyramid"
    TEST: "./src/pyramid-test"
    TEST_FILES: "*_test.py"

jobs:

  compile:
    name: "Compile Python 3.11"
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.version.outputs.json }}
      version: ${{ steps.version.outputs.version }}
      commit_id: ${{ steps.version.outputs.commit_id }}
      last_author: ${{ steps.version.outputs.last_author }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              - ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
              - ${{ runner.os }}-pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test compilation
        run: |
          python -m compileall ${{ env.SRC }}

      - name: Save version
        run: |
          python ${{ env.SRC }} --version
          FULL_JSON=$(python ${{ env.SRC }} --version)
          echo "json=$(echo $FULL_JSON | jq -c)" >> $GITHUB_OUTPUT
          echo "version=$(echo $FULL_JSON | jq -r '.version')" >> $GITHUB_OUTPUT
          echo "commit_id=$(echo $FULL_JSON | jq -r '.git_info.commit_id')" >> $GITHUB_OUTPUT
          echo "last_author=$(echo $FULL_JSON | jq -r '.git_info.last_author')" >> $GITHUB_OUTPUT
        id: version

  unit_test:
    name: "Unit tests Python"
    needs: compile
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            clean: false

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              - ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
              - ${{ runner.os }}-pip
            lookup-only: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Units tests
        env:
          DEEZER__ARL: ${{ secrets.DEEZER_ARL }}
        run: |
          python -m unittest discover -v -s ${{ env.TEST }} -p ${{ env.TEST_FILES }}

  version_compatibility:
    name: "Compile Python"
    needs: compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.12"]
    continue-on-error: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-python_${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              - ${{ runner.os }}-python_${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
              - ${{ runner.os }}-python_${{ matrix.python-version }}-pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test compilation
        run: |
          python -m compileall ${{ env.SRC }}

  docker_tag:
    name: "Docker image tag"
    needs: ["compile", "unit_test"]
    runs-on: ubuntu-latest
    outputs:
        docker_tag: ${{ steps.docker_tag.outputs.tag }}
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 100

      - name: Get tags
        run: git fetch --tags origin

      - name: Set Docker Image Tag
        id: docker_tag
        run: |
          if [ ${{ github.ref }} = 'refs/heads/main' ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          elif [ ${{ github.ref }} = 'refs/heads/pre-prod' ]; then
            echo "tag=pre-prod" >> $GITHUB_OUTPUT
            echo "tag_github=unstable" >> $GITHUB_OUTPUT
          else
            echo "tag=dev" >> $GITHUB_OUTPUT
          fi

  docker_build_push:
    name: "Docker image Build & Push"
    needs: ["compile", "docker_tag"]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && needs.docker_tag.outputs.docker_tag != 'latest'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set git info
        run: |
          echo '${{ needs.compile.outputs.json }}' | jq -r '.git_info' > git_info.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker image Build
        if: 
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pyramid:${{ needs.docker_tag.outputs.docker_tag }},
            ${{ secrets.DOCKERHUB_USERNAME }}/pyramid:${{ needs.compile.outputs.version }}-${{ needs.compile.outputs.commit_id }}

          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker image Push
        if: 
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pyramid:${{ needs.docker_tag.outputs.docker_tag }},
            ${{ secrets.DOCKERHUB_USERNAME }}/pyramid:${{ needs.compile.outputs.version }}-${{ needs.compile.outputs.commit_id }}

          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker_swarm_deploy:
    name: "Deploy to Docker Swarm"
    needs: ["docker_build_push"]
    runs-on: ubuntu-latest
    environment: "pre-production"

    steps:
      - name: Docker Swarm Update
        uses: wshihadeh/docker-deployment-action@v1
        with:
          remote_docker_host: ${{ secrets.DOCKER_USER }}@${{ secrets.DOCKER_HOST }}
          ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
          ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }}
          deployment_mode: docker-swarm
          copy_stack_file: true
          deploy_path: ${{ vars.PROJECT_DIR }}
          stack_file_name: ${{ vars.DOCKER_COMPOSE_FILENAME }}
          args: ${{ vars.DOCKER_STACK_NAME }}
